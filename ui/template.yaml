kind: Template
apiVersion: v1
metadata:
  name: openshift-microservices
  annotations:
    description: This example shows how to create application containing multiple micoroservices in openshift origin v3
    iconClass: icon-python
labels:
  template: openshift-microservices-template
objects:
  #
  # build configuration
  #
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: blast-ui
      labels:
        name: blast-ui
    spec:
      triggers:
        - type: GitHub
          github:
            secret: secret101
        - type: Generic
          generic:
            secret: secret101
        - type: ImageChange
        - type: ConfigChange
      source:
        type: Git
        git:
          uri: https://github.com/soltysh/talks.git
        contextDir: 2015/pyconpl/src/blast-ui
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: DockerImage
            name: soltysh/lighttpd-centos7
      output:
        to:
          kind: ImageStreamTag
          name: blast-ui:latest
  #
  # image stream configuration
  #
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: blast-ui
  #
  # deployment configuration
  #
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: blast-ui
    spec:
      strategy:
        type: Rolling
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - blast-ui
            from:
              kind: ImageStreamTag
              name: blast-ui:latest
        - type: ConfigChange
      replicas: 1
      selector:
        name: blast-ui
      template:
        metadata:
          labels:
            name: blast-ui
        spec:
          containers:
            - name: blast-ui
              image: blast-ui
              ports:
                - containerPort: 8080
                  protocol: TCP
              readinessProbe:
                httpGet:
                  path: /blast/api/v1.0/image/x
                  port: 8080
                  scheme: HTTP
              imagePullPolicy: IfNotPresent
          restartPolicy: Always
  #
  # service configuration
  #
  - kind: Service
    apiVersion: v1
    metadata:
      name: blast-ui
    spec:
      ports:
        - name: web
          protocol: TCP
          port: 8080
          targetPort: 8080
      selector:
        name: blast-ui
  #
  # route configuration
  #
  - kind: Route
    apiVersion: v1
    metadata:
      name: blast-ui
    spec:
      to:
        kind: Service
        name: blast-ui
